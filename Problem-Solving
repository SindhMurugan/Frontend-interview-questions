# JavaScript Problem-Solving Questions

- Remove duplicates from the array  
- Count the numbers  
- Find the second-largest value  
- Set zero to the matrix  
- Group the objects  
- Shallow and deep copy  
- Load 100 images in JavaScript  
- Load dynamic columns and values in a table, and implement filtering  
- Share data from parent to child  
- Closure  
- Curry function and infinite currying  
- Promise and promise methods  
- Convert object to array  
- Convert array to object  
- Convert interface to union  
- Merge an array of objects into a single object  
- Flatten a nested object into key paths 
console.log(output, ";output");

// Expected output format:
// a -> b -> 1
// a -> b -> c -> x -> 1
// a -> b -> c -> y -> 2
// z -> 1

const sample_input = {
    a: {
        b: 1,
        c: {
            x: 1,
            y: 2
        },
    },
    z: 1
};

function nestedObj(obj, path = '') {
    if (!obj) return;

    for (let key in obj) {
        const new_path = path ? path + "->" + key : key;

        if (typeof obj[key] === 'object' && obj[key] !== null) {
            nestedObj(obj[key], new_path);
        } else {
            console.log(new_path + "->" + obj[key]);
        }
    }
}

nestedObj(sample_input);

 merge array of object based on id
const arr1 = [
    { id: 1, name: 'John' },
    { id: 2, name: 'Jane' }
];

const arr2 = [
    { id: 1, age: 25 },
    { id: 2, age: 30 }
];

